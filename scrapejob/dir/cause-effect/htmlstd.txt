Node JS small function to extract info from html files.

We need to add a function to our existing node.js function base.   This new function will be called by another js function every 30 seconds.  The function should traverse the pre selected directory structure, and look for HTML files that have changed.  It should read the HTML file and extract json objects that are stored in comment areas.  

Example
   <!--  
   {
   "B":
    {
    "X":"Y",
    "DataForView" : "{[{"a":"b"},{"c":"d"}]}"}
    }
    }
    -->

Then it should process each json object:
	Extract main ID of the json object ("B")
	Extract the value pairs of the json object (X:Y and DataForView: {[{"a":"b"},{"c":"d"}]}
	Read CSS file B.css
	Read JS fike B.js
	'Process' the HTML file, create parameters for each HTML area split at any 'class view' or if a double curly brackets encountered {{}}

Then it should call an existing node.js function in the same code base with the results of that extraction.  
Then the original HTML file should be updated with a time date stamp & resaved.

We do not need this integrated, we just need code that you have tested and commented showing where to set the directory structure and where to set what function should be called with results.

Parameter List created:
P1	v1 (all parameters encountered in json object)
P2	v2
Wid 	id of the json object
CSS 	look for id.css file
JS 	look for id.JS file
1	html
2	html
3	html



Example HTML

   <!--  
   {
   "B":
    {
    "X":"Y",
    "DataForView" : "{[{"a":"b"},{"c":"d"}]}"}
    }
    }
    -->
   <!--  
   {
   "A":
    {
    "Test"	  : "hello",
    "DataForView" : "{[{"e":"f"},{"g":"h"}]}"}
    }
    }
    -->
   <!--  
   {
   "C":
    {
    "Z":"W",
    "DataForView" : "{[{"j":"k"},{"l":"m"}]}"}
    }
    }
    -->
ddd
{{mmm}}
<div class view id = 'A'>
eee
{{nnn}}

	<div class view id = 'B'>
	fff
	{{ppp}}
		<div class view id = 'C'>
		ggg
		{{rrr}}
		<div/>
	hhh
	{{ttt}}
	<div/>
jjj
{{sss}}
<div/>
kkk
{{www}}
<!-- Time Stamp 1/1/1 -->

assume these files exist and have this content:
A.css	ACSS 
A.js	AJS
B.css	BCSS
B.js	BJS
C.css	CCSS
C.js	CJS

Will produce these parameter sets:

wid:	A
1:	eee
2:	{{nnn}}		
3:	{{B}}
4:	jjj
5:	{{sss}}
CSS:	ACSS
JS:	AJS
Test:	Hello
DataForView : {[{"e":"f"},{"g":"h"}]}"}

Wid B
1:	fff
2:	{{ppp}}
3:	{{C}}
4:	hhh
5:	{{ttt}}
CSS:	BCSS
JS:	BJS
X:	Y
DataForView : {[{"a":"b"},{"c":"d"}]}"}

Wid C
1:	ggg
2:	{{rrr}}
CSS:	CCSS
JS:	CJS
Z:	W"
DataForView : {[{"j":"k"},{"l":"m"}]}"}




Example HTML File: 444.html
<div class view id = '444'>
	444-1
	444-2
	<!--  
	{
	"444":
	{
		"DataForView" : "{[{"back222":"wallet333", "back777":"wallet555"}]}"}
		}
	}
	 -->
	{{back222}}
	{{back777}}
	444-3
	444-4
<div/>
<div class view id = 'back222' >
back222-1
back222-2
	<!-- 
	{"back222":{
		"DataForView" : "{[{"wallet333":"offer1"},{"wallet555":"offer2"}]}"
	}}
	-->
	{{wallet333}}
	{{wallet555}}
back222-3
back222-4
<div/>
<div class view id = 'back777' >
back777-1
back777-2
	<!-- 
	{"back777":{
		"DataForView" : "{[{"wallet888":"offer3"},{"wallet999":"offer4"}]}"
	}}
	-->
	{{wallet888}}
	{{wallet999}}
back777-3
back777-4
<div/>
<div class view id = 'wallet333' >
wallet333-1
wallet333-2
	<!-- 
	{"wallet333":{
		"DataForView" : "{[{"":"310je"}]}"
	}}
	-->
	{{offer1}}
wallet333-3
wallet333-4
<div/>
<div class view id = 'wallet555' >
wallet555-1
wallet555-2
	<!-- 
	{"wallet555":{
		"DataForView" : "{[{"":"vosdd"}]}"
	}}
	-->
	{{offer1}}
wallet555-3
wallet555-4
<div/>
<div class view id = 'wallet888' >
wallet888-1
wallet888-2
	<!-- 
	{"wallet888":{
		"DataForView" : "{[{"":"abcde"}]}"
	}}
	-->
	{{offer1}}
wallet888-3
wallet888-4
<div/>
<div class view id = 'wallet999' >
wallet999-1
wallet999-2
	<!-- 
	{"wallet999":{
		"DataForView" : "{[{"":"xyzwe"}]}"
	}}
	-->
	{{offer1}}
wallet999-3
wallet999-4
<div/>
<div class view id = 'offer1' >
offer1-1
offer1-2
{{shortdescription}}
offer1-3
offer1-4
<div/>
<div class view id = 'offer2' >
offer2-1
offer2-2
{{shortdescription}}
offer2-3
offer2-4
<div/>
<div class view id = 'offer3' >
offer3-1
offer3-2
{{shortdescription}}
offer3-3
offer3-4
<div/>
<div class view id = 'offer4' >
offer4-1
offer4-2
{{shortdescription}}
offer4-3
offer4-4
<div/>
