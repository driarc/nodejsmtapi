Node JS small function to extract info from html files

We need to add a function to our existing node.js function base.   This new function will be called by another js function every 30 seconds.  The function should traverse the pre selected directory structure, and look for HTML files that have changed.   

High Level:
1) It should read the HTML file that changed
2) It should read special comment lines that instruct it to insert further text from other files or divs
3) It should read special comment lines that instruct it to process areas of the file in specific ways
4) It should save the resulting file

Detail:
2) It should look for comment lines that look like this: 
	<l!-- {"ExecuteThis":"GetFile"},{"WID":"<filename>"} --> (with opt parameters {"DIVCLASS":"<div class>"}{"DIVID":"<div id>"}
	Go read that file (may be current file), go read that optional class or div, insert it to current file in place
	create Div like this around it <div class file data-wid=ppp data-div=end>
3) It should look for comment lines that look like this
*****
	<l!-- {"
	Look for specific parameters ExecuteThis, wid, div, createfile, dataforView

	Bring into memory the target wid/div

	Put left over parameters in parameters to be processes
	Look for parameter dataforView, 
		Read parameters in dataforView, now add to them
		For each class view create a parentid: childid value pair
		update dataforView
*****
		If ExecuteThis = "ProcessHTML" then
		Create parameter 'CSS' -- attempt to Read CSS file <div>.css
		Create parameter 'JS' -- attempt to Read JS file <div>.JS
		Starting at <div> create parameters starting with parameter name '1' for each HTML area 
			class file becomes <l!-- {"ExecuteThis":"GetFile"},{"WID":"<filename>"} --> (reverse of how it was created)
			continue with next parameter with HTML below that class file
		Call a function executeThis {"AddThis":<div> +  parameters}
		If parameter CreateFile=True the create HTML, CSS, JS actual files for <div>
		Save the results of processing each json object
	Save original file


Example
Assume these files exist and have this content:
A.css	ACSS 
A.js	AJS 

B.css	BCSS
B.js	BJS
C.css	CCSS
C.js	CJS

ppp.html
<div class view id = 'ppp'>
	<div class content id = 'begin'
		444-1
		444-2
	<div/>
	<div class content id = 'end'
		444-3
		444-4
	<div/>
<div/>

Example HTML that just changed
XYZ.html
   <!--  
    {
    "ExecuteThis":"ProcessHTML"
    "Wid":"B",
    "Div":"B",
    "X":"Y",
    "DataForView" : "{[{"a":"b"},{"c":"d"}]}"
    }
    -->
   <!--  
    {
    "ExecuteThis":"ProcessHTML"
    "Wid":"A",
    "Div":"A",
    "Test"	  : "hello",
    "DataForView" : "{[{"e":"f"},{"g":"h"}]}"}
    }
    -->
<!-- Time Stamp 1/1/1 -->
   <!--  
   {
    "ExecuteThis":"ProcessHTML"
    "Wid":"C",
    "Div":"C",
    "Z":"W",
    "DataForView" : "{[{"j":"k"},{"l":"m"}]}"},
    "CreateFile"  : "TRUE"
    }
    -->
<!-- Time Stamp 1/1/1 -->
ddd
<div class view id = 'A'>
eee
	<div class view id = 'B'>
	fff
	<l!-- {"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"begin"} -->
		<div class view id = 'C'>
		ggg
		<div/>
	<l!-- {"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"end"} -->
	hhh
	<div/>
jjj
	<div class view id = 'D'>
	xyz
	<div/>
www
<div/>
kkk
<!-- Time Stamp 1/1/1 -->

Will change to this:
XYZ.html
   <!--  
    {
    "ExecuteThis":"ProcessHTML"
    "Wid":"B",
    "Div":"B",
    "X":"Y",
    "DataForView" : "{[{"a":"b"},{"c":"d"}]}"
    }
    -->
   <!--  
    {
    "ExecuteThis":"ProcessHTML"
    "Wid":"A",
    "Div":"A",
    "Test"	  : "hello",
    "DataForView" : "{[{"e":"f"},{"g":"h"}]}"}
    }
    -->
<!-- Time Stamp 1/1/1 -->
   <!--  
   {
    "ExecuteThis":"ProcessHTML"
    "Wid":"C",
    "Div":"C",
    "Z":"W",
    "DataForView" : "{[{"j":"k"},{"l":"m"}]}"},
    "CreateFile"  : "TRUE"
    }
    -->
   <!--  
   {
    "ExecuteThis":"ProcessHTML"
    "Wid":"XYZ",
    "test":"fromXYZ",
    "DataForView" : "{[{"j":"k"},{"l":"m"}]}"},
    }
    -->
    -->
   <!--  
   {
    "ExecuteThis":"AddThis"
    "Wid":"test1",
    "x":"y",
    "z":"w",
    }
    -->
<!-- Time Stamp 1/1/1 -->
ddd
<div class view id = 'A'>
eee
	<div class view id = 'B'>
	fff
	<div class file data-wid=ppp data-div=begin>
	<div class content id = 'begin'
		444-1
		444-2
	<div/>
	<div/>
		<div class view id = 'C'>
		ggg
		<div/>
	<div class file data-wid=ppp data-div=end>
	<div class content id = 'end'
		444-3
		444-4
	<div/>
	<div/>
	<div/>
jjj
	<div class view id = 'D'>
	xyz
	<div/>
www
<div/>
kkk
<!-- Time Stamp 1/1/1 -->





Will produce these parameter sets:

wid:	A
1:	<div class view id = 'A'> eee <div class view id = 'B'> fff
2:	{"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"begin"}
3: 	<div class view id = 'C'> ggg <div/>
4:	{"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"end"}
5:	jjj <div class view id = 'D'> xyz <div/> www <div/>
CSS:	ACSS
JS:	AJS
Test:	Hello
DataForView : {[{"e":"f"},{"g":"h"}]}"}

Wid B
1:	<div class view id = 'B'> fff
2:	{"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"begin"}
3: 	<div class view id = 'C'> ggg <div/>
4:	{"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"end"}
5	<div>

1:	fff
3:	{"ExecuteThis":"DisplayHTML","WID":"C"}
4:	hhh
CSS:	BCSS
JS:	BJS
X:	Y
DataForView : {[{"a":"b"},{"c":"d"}]}"}

Wid C
1:	ggg
CSS:	CCSS
JS:	CJS
Z:	"W"
DataForView : {[{"j":"k"},{"l":"m"}]}"}


******
wid:	XYZ
1: 	ddd
2:	<div class view id = 'A'> eee <div class view id = 'B'> fff
3:	{"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"begin"}
4: 	<div class view id = 'C'> ggg <div/>
5:	{"ExecuteThis":"GetFile","WID":"ppp","DIVCLASS":"end"}
6:	jjj <div class view id = 'D'> xyz <div/> www <div/>
7:	kkk
CSS:	XYZCSS
JS:	XYZJS
Test:	from xyz
DataForView : {[{"e":"f"},{"g":"h"},{"a":"b"},{"a":"d"},{"b":"c"}]}"}

"Wid":	"test1"
"x":	"y"
"z":	"w"
******

It will add a time stamp to XYZ.html, and to each json object
It will create file C.html, C.CSS, C.JS (look for style and script tags inside div)




Example base HTML File: base444.html
<div class view id = '444'>
	<div class content id = 'begin'
		444-1
		444-2
	<div/>
	<div class content id = 'end'
		444-3
		444-4
	<div/>
<div/>

Example backgroundfiles back222 & back777
<div class view id = 'back222' >
	<div class content id = 'begin'
		back222-1
		back222-2
	<div/>
	<div class content id = 'end'
		back222-3
		back222-4
	<div/>
<div/>

<div class view id = 'back777' >
	<div class content id = 'begin'
		back777-1
		back777-2
	<div/>
	<div class content id = 'end'
		back777-3
		back777-4
	<div/>
<div/>



New123.html
<!--  
	{
	"ExecuteThis":	"ProcessHTML"
	"Wid":		"New123"}
-->
   <!--  {
"ExecuteThis":"ProcessHTML"
"Wid":"offer1",
"DataForView" : "{[{"j":"k"},{"l":"m"}]}"},
    }-->
   <!--  {
"ExecuteThis":"ProcessHTML"
"Wid":"offer2",
"DataForView" : "{[{"j":"k"},{"l":"m"}]}"},
    }-->
   <!--  {
"ExecuteThis":"ProcessHTML"
"Wid":"offer3",
"DataForView" : "{[{"j":"k"},{"l":"m"}]}"},
    }-->
   <!--  {
"ExecuteThis":"ProcessHTML"
"Wid":"offer4",
"DataForView" : "{[{"j":"k"},{"l":"m"}]}"},
    }-->
<l!-- {"ExecuteThis":"GetFile","Wid":"Base444","DIVCLASS":"begin"} -->
	<l!-- {"ExecuteThis":"GetFile","Wid":"Back222","DIVCLASS":"begin"} -->
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet333","DIVCLASS":"begin"} -->
			<div class view id = 'offer1' >
				offer1-1
				offer1-2
				{{shortdescription}}
				offer1-3
				offer1-4
			<div/>
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet333","DIVCLASS":"end"} -->
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet555","DIVCLASS":"begin"} -->
			<div class view id = 'offer2' >
				offer2-1
				offer2-2
				{{shortdescription}}
				offer2-3
				offer2-4
			<div/>
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet555","DIVCLASS":"end"} -->
	<l!-- {"ExecuteThis":"GetFile","Wid":"back222","DIVCLASS":"end"} -->

	<l!-- {"ExecuteThis":"GetFile","Wid":"back777","DIVCLASS":"begin"} -->
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet888","DIVCLASS":"begin"} -->
			<div class view id = 'offer3' >
				offer3-1
				offer3-2
				{{shortdescription}}
				offer3-3
				offer3-4
			<div/>
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet888","DIVCLASS":"end"} -->
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet999","DIVCLASS":"begin"} -->
			<div class view id = 'offer4' >
				offer4-1
				offer4-2
				{{shortdescription}}
				offer4-3
				offer4-4
			<div/>
		<l!-- {"ExecuteThis":"GetFile","Wid":"wallet999","DIVCLASS":"end"} -->
	<l!-- {"ExecuteThis":"GetFile","Wid":"back777","DIVCLASS":"end"} -->
<l!-- {"ExecuteThis":"GetFile","Wid":"base444","DIVCLASS":"end"} -->

Should produce these parameters
wid:	base444
CSS:	base444CSS
JS:	base444JS
"DataForView" : "{[
{"offer1":"310je"}, {"offer2":"vosdd"}, {"offer3":"abcabc"}, {"offer4":"xyzxyz"}
base444: back222, base444: back777, back222: wallet333, back222: wallet555, back777: wallet888, back777: wallet999
wallet333: offer1, wallet555: offer2, wallet888: offer3, wallet999: offer4
]}

wid:	offer1
1:	offer1-1 offer1-2 {{shortdescription}} offer1-3 offer1-4
CSS:	offer1CSS
JS:	offer1JS

wid:	offer2
1:	offer2-1 offer2-2 {{shortdescription}} offer2-3 offer2-4
CSS:	offer2CSS
JS:	offer2JS

wid:	offer3
1:	offer3-1 offer3-2 {{shortdescription}} offer3-3 offer3-4
CSS:	offer3CSS
JS:	offer3JS

wid:	offer4
1:	offer4-1 offer4-2 {{shortdescription}} offer4-3 offer4-4
CSS:	offer4CSS
JS:	offer4JS